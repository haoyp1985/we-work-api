---
alwaysApply: true
---
# 🎯 WeWork SaaS平台项目规则总览

## 📋 项目背景
企业级多租户SaaS平台，基于Spring Cloud微服务架构，支持企微管理、AI智能体、健康管理等多业务模块。

## 🏗️ 核心架构特征
- **多租户SaaS架构**: 统一身份认证、权限管理、配额控制
- **分库分表设计**: 6个业务数据库，98张表，支持海量数据
- **微服务架构**: Spring Cloud生态，服务自治、独立部署
- **事件驱动**: RocketMQ消息队列，异步解耦
- **多模存储**: MySQL主库 + Redis缓存 + InfluxDB时序 + MinIO对象存储

## 🔧 技术栈规范
```yaml
后端技术栈:
  框架: Spring Boot 3.2.0 + Spring Cloud 2023.0.0
  数据库: MySQL 8.0 + MyBatis-Plus
  缓存: Redis 7.0 + Caffeine
  消息队列: RocketMQ 5.1
  服务治理: Nacos + OpenFeign + Ribbon
  监控: Prometheus + Grafana + Jaeger
  容器化: Docker + Docker Compose

前端技术栈:
  框架: Vue 3 + TypeScript + Element Plus
  构建: Vite + Pinia
  UI库: Element Plus + SCSS
```

## 📁 核心模块结构
```
backend/
├── account-service/      # 账户管理服务 ✅
├── message-service/      # 消息发送服务 ✅  
├── gateway-service/      # API网关服务 ✅
├── monitor-service/      # 监控服务 ✅
├── callback-service/     # 回调处理服务 ✅
├── common/              # 通用模块 ✅
└── [新增服务]/          # 扩展业务服务

frontend/
├── admin-web/           # 管理后台 ✅
└── monitor-dashboard/   # 监控大屏 🚧
```

## 🎯 开发约定
1. **严格遵循**: 所有架构设计、数据库设计、API设计规范
2. **保持复杂度**: 不简化核心业务逻辑，完整保留生命周期跟踪
3. **统一标准**: 代码风格、命名规范、异常处理统一
4. **性能优先**: 缓存策略、分页查询、批量操作优化
5. **安全第一**: 数据加密、权限控制、审计日志完整

## 📚 规则文档索引
- [架构规则](./01-architecture-rules.md) - 整体架构设计规范
- [数据库规则](./02-database-rules.md) - 数据库设计和操作规范  
- [API规则](./03-api-rules.md) - 接口设计和实现规范
- [代码规范](./04-code-standards.md) - 编码风格和质量规范
- [微服务规则](./05-microservice-rules.md) - 微服务设计和治理规范
- [安全规范](./06-security-rules.md) - 安全设计和实现规范
- [性能规范](./07-performance-rules.md) - 性能优化和监控规范

## ⚠️ 重要提醒
- **禁止简化**: 核心业务逻辑（企微状态跟踪、AI调度策略）不可简化
- **多租户必须**: 所有业务表必须包含tenant_id字段
- **审计完整**: 重要操作必须记录审计日志
- **错误统一**: 使用统一的异常处理和错误码
- **文档同步**: 代码变更必须同步更新相关文档